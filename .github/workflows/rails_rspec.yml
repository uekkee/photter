# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will download a prebuilt Ruby version, install dependencies and run tests with Rake
# For more information see: https://github.com/marketplace/actions/setup-ruby-jruby-and-truffleruby

name: ruby

on:
  [push]

jobs:
  rspec:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        ci_node_total: [2]
        ci_node_index: [0, 1]
    services:
      mysql:
        image: mysql:8
        ports:
          - 3306:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: 1
          TZ: Asia/Tokyo

    steps:
      - uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '16.x'

      - name: Cache bundle directory
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('.ruby-version') }}-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-${{ hashFiles('.ruby-version') }}-

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          yarn install

      - name: Verify mysql connection
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P3306 --silent; do
            sleep 1
          done

      - name: Webpack
        run: |
          bin/webpack
        env:
          NODE_ENV: test
          RAILS_ENV: test

      - name: Setup Database
        run: |
          bundle exec rake db:create
          bundle exec rake db:schema:load
        env:
          RAILS_ENV: test

      - name: Run rspec
        run: |
          .github/execute_rspec_for_each_node
        env:
          RAILS_ENV: test
          HEADLESS_E2E: 1
          CI: true
          CI_NODE_TOTAL: ${{ matrix.ci_node_total }}
          CI_NODE_INDEX: ${{ matrix.ci_node_index }}

      - name: Archive rspec result screenshots
        if: failure()
        uses: actions/upload-artifact@v1
        with:
          name: rspec result screenshots
          path: tmp/screenshots

      - name: move coverage resultset
        run: |
          mkdir -p ./cov
          mv coverage/.resultset.json cov/.resultset-${{ matrix.ci_node_index }}.json

      - name: Archive coverage resultset
        uses: actions/upload-artifact@v2
        with:
          name: coverage_resultset_${{ matrix.ci_node_index }}
          path: ./cov

  analyse-coverage:
    runs-on: ubuntu-latest
    needs: rspec
    if: github.ref != 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1

      - name: Cache bundle directory
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('.ruby-version') }}-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-${{ hashFiles('.ruby-version') }}-

      - name: Install dependencies
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: make coverage dir
        run: |
          mkdir -p ./cov

      - uses: actions/download-artifact@v2
        with:
          name: coverage_resultset_0
          path: ./cov
      - uses: actions/download-artifact@v2
        with:
          name: coverage_resultset_1
          path: ./cov

      - name: concatenate coverage report
        run: |
          bundle exec ruby .github/result_merger.rb

      - name: analyse coverage report
        run: |
          bundle exec undercover --lcov ./cov/all.lcov --compare origin/master

  generate-coverage-report:
    runs-on: ubuntu-latest
    needs: rspec
    steps:
      - uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1

      - name: Cache bundle directory
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('.ruby-version') }}-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-${{ hashFiles('.ruby-version') }}-

      - name: Install dependencies
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: make coverage dir
        run: |
          mkdir -p ./cov

      - uses: actions/download-artifact@v2
        with:
          name: coverage_resultset_0
          path: ./cov
      - uses: actions/download-artifact@v2
        with:
          name: coverage_resultset_1
          path: ./cov

      - name: generate coverage report html
        run: |
          bundle exec ruby -e "require 'simplecov'; SimpleCov.collate Dir['./cov/.resultset*.json'], 'rails'"

      - name: Archive coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage_report
          path: ./coverage
